#!/usr/bin/env python

import os
import requests
import socket
import json
import time
import base64
import logging
import fire
from pathlib import Path

HOME = Path(__file__).resolve().parent.parent
VAR = HOME / "var" / "liray"


class Liray:
    def __init__(self, expire=3600):
        self._subs = []
        self._servers = []
        self._template = {}
        self._uris = []
        self.expire = expire
        # self._running = False
        self._load_subs()
        self._load_servers()
        self._load_template()

    def sub(self, uri, replace=False):
        if replace:
            self._uris = [uri]
        elif uri in self._uris:
            logging.info("URI: {} already exists...".format(uri))
        else:
            self._uris.append(uri)
        with open(VAR / "subscribes.txt", "w") as f:
            f.writelines(self._uris)

    def start(self):
        self._load_servers()
        self.export()
        os.system("v2ray -config {}".format(str(VAR / "config.json")))

    def _tcping(self, ip, port, timeout=2):
        sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sk.settimeout(timeout)
        try:
            t1 = time.time()
            sk.connect((ip, port))
            t2 = time.time()
            sk.close()
            return True, int(round((t2 - t1) * 1000))
        except Exception as err:
            sk.close()
            logging.debug(err)
            return False, timeout * 1000

    def _load_subs(self):
        fp = VAR / "subscribes.txt"
        if not fp.exists():
            fp.parent.mkdir(parents=True, exist_ok=True)
            self._subs = []
        else:
            with open(fp, "r") as f:
                self._subs = [sub.strip() for sub in f.readlines()]
        return self._subs

    def _load_servers(self, force=False):
        cache = VAR / "servers.json"
        expired = not (cache.exists() and time.time() -
                       cache.stat().st_mtime < self.expire)
        servers = []
        if len(self._subs) == 0:
            return servers
        if force or expired:
            for sub in self._subs:
                logging.info("Request {}".format(sub))
                r = requests.get(sub)
                links = base64.b64decode(r.text).decode("ascii").split("\n")
                supported_protocols = ["vmess"]
                for link in links:
                    try:
                        protocol, server = link.split("://")
                        if protocol not in supported_protocols:
                            logging.debug("{} not support".format(protocol))
                        server = json.loads(base64.b64decode(server))
                        server["protocol"] = protocol
                        if self._tcping(server["add"], server["port"])[0]:
                            servers.append(server)
                    except Exception as error:
                        print(error)
            if len(servers) > 0:
                logging.info("Saving {} servers".format(len(servers)))
                with open(cache, "w") as f:
                    json.dump(servers, f)
        else:
            logging.info("Loading servers from cache")
            with open(cache, "r") as f:
                servers = json.load(f)
            if not force and not self._subs and not servers:
                logging.warn("Empty server list, try again...")
                self._load_servers(force=True)
        for s in servers:
            s["delay"] = self._tcping(s["add"], int(s["port"]))[1]
        self._servers = servers
        return servers

    def status(self):
        logging.info("Status: subs=> {}, servers=> {}".format(
            len(self._subs), len(self._servers)))

    def export(self, count=10, target=VAR / "config.json"):
        config = self._template.copy()
        for server in self._servers[:count]:
            config['outbounds'].insert(0, self._parse(server))
        with open(target, "w") as f:
            json.dump(config, f)
        return config

    def _load_template(self, target=HOME / "etc" / "liray" / "template.json"):
        if not target or not target.exists():
            self._template = {
                "inbounds": [
                    {
                        "tag": "socks",
                        "port": 10800,
                        "listen": "127.0.0.1",
                        "protocol": "socks"
                    },
                    {
                        "tag": "http",
                        "port": 10801,
                        "listen": "127.0.0.1",
                        "protocol": "http"
                    }
                ],
                "outbounds": [
                    {
                        "protocol": "freedom",
                        "tag": "direct",
                        "settings": {}
                    }
                ]
            }
        else:
            with open(target, "r") as f:
                self._template = json.load(f)
        return self._template

    def ping(self):
        for server in self._servers:
            available, delay = self._tcping(server["add"], int(server["port"]))
            if available:
                logging.info(
                    "Available server {}, with delay {}".format(server['ps'],
                                                                delay))
            server['delay'] = delay
        sorted(self._servers, key=lambda s: s["delay"])

    def _parse(self, server):
        '''      
            {
                'v': 2,
                'ps': 'name',
                'add': 'address',
                'port': port,
                'id': 'identity',
                'aid': 4,
                'net': 'ws',
                'type': 'none',
                'host': '',
                'path': '/path',
                'tls': '',
                'protocol': 'vmess'
            }
        '''
        if server["protocol"] == "vmess":
            settings = {
                "vnext": [
                    {
                        "address": server["add"],
                        "port": server["port"],
                        "users": [
                            {
                                "id": server["id"],
                                "alterId": server["aid"],
                                "security": "auto",
                                "level": 0,
                            }
                        ],
                    }
                ]
            }
            streamSettings = {
                "network": server["net"],
                "security": server["type"],
                "tag": server["ps"],
            }
            if server["net"] == "ws":
                streamSettings["wsSettings"] = {
                    "path": server["path"],
                    "host": server["host"],
                }
        outbound = {
            "protocol": server["protocol"],
            "settings": settings,
            "streamSettings": streamSettings,
        }
        return outbound


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    fire.Fire(Liray)
